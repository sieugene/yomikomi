const sharp = require("sharp");
const fs = require("fs");
const path = require("path");

// –†–∞–∑–º–µ—Ä—ã –∏–∫–æ–Ω–æ–∫ –¥–ª—è PWA
const ICON_SIZES = [72, 96, 128, 144, 152, 192, 384, 512];

// –¶–≤–µ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–∫–æ–Ω–∫–∏ (–µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
const DEFAULT_ICON_CONFIG = {
  background: "#000000",
  foreground: "#ffffff",
  text: "Y", // –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
};

async function generateIcons() {
  const iconsDir = path.join(process.cwd(), "public", "icons");
  const sourceIcon = path.join(process.cwd(), "public", "icon-source.png");

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∫–æ–Ω–æ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync(iconsDir)) {
    fs.mkdirSync(iconsDir, { recursive: true });
  }

  let baseIcon;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –∏–∫–æ–Ω–∫–∏
  if (fs.existsSync(sourceIcon)) {
    console.log("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∏–∫–æ–Ω–∫—É:", sourceIcon);
    baseIcon = sharp(sourceIcon);
  } else {
    console.log("üé® –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–∫–æ–Ω–∫—É...");

    // –°–æ–∑–¥–∞–µ–º SVG –¥–ª—è –±–∞–∑–æ–≤–æ–π –∏–∫–æ–Ω–∫–∏
    const svg = `
      <svg width="512" height="512" xmlns="http://www.w3.org/2000/svg">
        <rect width="512" height="512" fill="${DEFAULT_ICON_CONFIG.background}" rx="64"/>
        <text x="50%" y="50%" 
              font-family="Arial, sans-serif" 
              font-size="300" 
              font-weight="bold" 
              fill="${DEFAULT_ICON_CONFIG.foreground}" 
              text-anchor="middle" 
              dominant-baseline="central">
          ${DEFAULT_ICON_CONFIG.text}
        </text>
      </svg>
    `;

    baseIcon = sharp(Buffer.from(svg));
  }

  console.log("üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤:", ICON_SIZES.join(", "));

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
  const promises = ICON_SIZES.map(async (size) => {
    const filename = `icon-${size}x${size}.png`;
    const filepath = path.join(iconsDir, filename);

    try {
      await baseIcon
        .clone()
        .resize(size, size, {
          fit: "contain",
          background: { r: 0, g: 0, b: 0, alpha: 0 },
        })
        .png({
          quality: 90,
          compressionLevel: 9,
        })
        .toFile(filepath);

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–∫–æ–Ω–∫–∞: ${filename}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${filename}:`, error.message);
    }
  });

  await Promise.all(promises);

  // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
  await generateAppleTouchIcon(baseIcon, iconsDir);
  await generateFavicon(baseIcon);
  await generateMaskableIcon(baseIcon, iconsDir);

  console.log("üéâ –í—Å–µ –∏–∫–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
}

async function generateAppleTouchIcon(baseIcon, iconsDir) {
  const appleTouchPath = path.join(iconsDir, "apple-touch-icon.png");

  try {
    await baseIcon
      .clone()
      .resize(180, 180)
      .png({ quality: 90 })
      .toFile(appleTouchPath);

    console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ Apple Touch Icon");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Apple Touch Icon:", error.message);
  }
}

async function generateFavicon(baseIcon) {
  const faviconPath = path.join(process.cwd(), "public", "favicon.ico");

  try {
    await baseIcon
      .clone()
      .resize(32, 32)
      .png()
      .toFile(faviconPath.replace(".ico", ".png"));

    // –î–ª—è .ico —Ñ–∞–π–ª–∞ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    await baseIcon
      .clone()
      .resize(16, 16)
      .png()
      .toFile(path.join(process.cwd(), "public", "favicon-16x16.png"));

    await baseIcon
      .clone()
      .resize(32, 32)
      .png()
      .toFile(path.join(process.cwd(), "public", "favicon-32x32.png"));

    console.log("‚úÖ –°–æ–∑–¥–∞–Ω—ã favicon —Ñ–∞–π–ª—ã");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è favicon:", error.message);
  }
}

async function generateMaskableIcon(baseIcon, iconsDir) {
  const maskablePath = path.join(iconsDir, "icon-maskable-512x512.png");

  try {
    // –°–æ–∑–¥–∞–µ–º maskable –∏–∫–æ–Ω–∫—É —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    const svg = `
      <svg width="512" height="512" xmlns="http://www.w3.org/2000/svg">
        <rect width="512" height="512" fill="${DEFAULT_ICON_CONFIG.background}"/>
        <circle cx="256" cy="256" r="200" fill="${DEFAULT_ICON_CONFIG.foreground}" opacity="0.1"/>
        <text x="50%" y="50%" 
              font-family="Arial, sans-serif" 
              font-size="240" 
              font-weight="bold" 
              fill="${DEFAULT_ICON_CONFIG.foreground}" 
              text-anchor="middle" 
              dominant-baseline="central">
          ${DEFAULT_ICON_CONFIG.text}
        </text>
      </svg>
    `;

    await sharp(Buffer.from(svg)).png({ quality: 90 }).toFile(maskablePath);

    console.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ maskable –∏–∫–æ–Ω–∫–∞");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è maskable –∏–∫–æ–Ω–∫–∏:", error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
if (require.main === module) {
  generateIcons().catch(console.error);
}

module.exports = { generateIcons };
